{
  "name": "tinkerforge",
  "preferGlobal": true,
  "version": "2.0.2",
  "guid": "b91da39e-e3e3-f75a-ff4a-cc2d29b31bff",
  "author": {
    "name": "Ishraq Ibne Ashraf",
    "email": "ishraq@tinkerforge.com"
  },
  "description": "JavaScript API Bindings for Tinkerforge Bricks and Bricklets",
  "contributors": [
    {}
  ],
  "bin": {},
  "scripts": {},
  "main": "./Tinkerforge.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/Tinkerforge/generators/tree/master/javascript"
  },
  "keywords": [
    "hardware",
    "embedded",
    "api"
  ],
  "dependencies": {},
  "analyze": true,
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-titaniumifier": "~0.2.7"
  },
  "license": "CC0",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "<hr />\n\n# Tinkerforge\n\nTinkerforge is a Node.js package that provides the\nTinkerforge API bindings for all Tinkerforge Bricks\nand Bricklets.\n\n## How to Install\n\n```\nnpm install tinkerforge\n```\n\n## How to Use\n\nTo be able to use the bindings first the API must be\nincluded in the code in following way:\n\n```js\nvar Tinkerforge = require('tinkerforge');\n```\n\nAfter that all the classes and their functionalities\nprovided by the binding can be accessed like:\n\n```js\nvar IPConnection = Tinkerforge.IPConnection;\nvar BrickletDualButton = Tinkerforge.BrickletDualButton;\n```\n\nThen to create an instance of a class:\n\n```js\nIPConnection = new IPConnection();\nBrickletDualButton = new BrickletDualButton();\n```\n\n## Documentation\n\nFor detailed documentation see the [Tinkerforge](http://www.tinkerforge.com/en/doc/Software/API_Bindings_JavaScript.html) homepage.\n\n## Examples\n\n### Enumeration\n```js\nvar Tinkerforge = require('tinkerforge');\n\nvar HOST = 'localhost';\nvar PORT = 4223;\n\n// Create connection and connect to brickd\nipcon = new Tinkerforge.IPConnection();\nipcon.connect(HOST, PORT);\n\nipcon.on(Tinkerforge.IPConnection.CALLBACK_CONNECTED,\n    function(connectReason) {\n        // Trigger Enumerate\n        ipcon.enumerate();\n    }\n);\n\n// Register Enumerate Callback\nipcon.on(Tinkerforge.IPConnection.CALLBACK_ENUMERATE,\n    // Print incoming enumeration\n    function(uid, connectedUid, position, hardwareVersion, firmwareVersion,\n             deviceIdentifier, enumerationType) {\n        console.log('UID:               '+uid);\n        console.log('Enumeration Type:  '+enumerationType);\n        if(enumerationType === Tinkerforge.IPConnection.ENUMERATION_TYPE_DISCONNECTED) {\n            console.log('');\n            return;\n        }\n        console.log('Connected UID:     '+connectedUid);\n        console.log('Position:          '+position);\n        console.log('Hardware Version:  '+hardwareVersion);\n        console.log('Firmware Version:  '+firmwareVersion);\n        console.log('Device Identifier: '+deviceIdentifier);\n        console.log('');\n    }\n);\n\nconsole.log(\"Press any key to exit ...\");\nprocess.stdin.on('data',\n    function(data) {\n        ipcon.disconnect();\n        process.exit(0);\n    }\n);\n```\n### Getter Call\n```js\nvar Tinkerforge = require('tinkerforge');\n\nvar HOST = 'localhost';\nvar PORT = 4223;\nvar UID = '7bA'; // Change to your UID\n\nvar ipcon = new Tinkerforge.IPConnection(); // Create IP connection\nvar h = new Tinkerforge.BrickletHumidity(UID, ipcon); // Create device object\n\nipcon.connect(HOST, PORT,\n    function(error) {\n        console.log('Error: '+error);        \n    }\n); // Connect to brickd\n// Don't use device before ipcon is connected\n\nipcon.on(Tinkerforge.IPConnection.CALLBACK_CONNECTED,\n    function(connectReason) {\n        // Get current humidity (unit is %RH/10)\n        h.getHumidity(\n            function(rh) {\n                console.log('Relative Humidity: '+rh/10+' %RH');\n            },\n            function(error) {\n                console.log('Error: '+error);\n            }\n        );\n    }\n);\n\nconsole.log(\"Press any key to exit ...\");\nprocess.stdin.on('data',\n    function(data) {\n        ipcon.disconnect();\n        process.exit(0);\n    }\n);\n\n```\n### Setter and Callbacks\n```js\nvar Tinkerforge = require('tinkerforge');\n\nvar HOST = 'localhost';\nvar PORT = 4223;\nvar UID = '7bA'; // Change to your UID\n\nvar ipcon = new Tinkerforge.IPConnection(); // Create IP connection\nvar h = new Tinkerforge.BrickletHumidity(UID, ipcon); // Create device object\n\nipcon.connect(HOST, PORT,\n    function(error) {\n        console.log('Error: '+error);        \n    }\n); // Connect to brickd\n// Don't use device before ipcon is connected\n\nipcon.on(Tinkerforge.IPConnection.CALLBACK_CONNECTED,\n    function(connectReason) {\n        // Set threshold callbacks with a debounce time of 10 seconds (10000ms)\n        h.setDebouncePeriod(10000); \n        // Configure threshold for \"outside of 30 to 60 %RH\" (unit is %RH/10)\n        h.setHumidityCallbackThreshold('o', 30*10, 60*10);    \n    }\n);\n\n// Register threshold reached callback\nh.on(Tinkerforge.BrickletHumidity.CALLBACK_HUMIDITY_REACHED,\n    // Callback for humidity outside of 30 to 60 %RH\n    function(humidity) {\n        if(humidity < 30*10) {\n            console.log('Humidity too low: '+humidity/10+' %RH');\n        }\n        if(humidity > 60*10) {\n            console.log('Humidity too high: '+humidity/10+' %RH');\n        }\n    }\n);\n\nconsole.log(\"Press any key to exit ...\");\nprocess.stdin.on('data',\n    function(data) {\n        ipcon.disconnect();\n        process.exit(0);\n    }\n);\n\n```\n## License\n\n(CC0)\n\nCopyright (C) 2014 Ishraq Ibne Ashraf <ishraq@tinkerforge.com>\n\nRedistribution and use in source and binary forms of this file,\nwith or without modification, are permitted. See the Creative\nCommons Zero (CC0 1.0) License for more details.\n",
  "readmeFilename": "README.md",
  "bundleDependencies": [],
  "_id": "tinkerforge@2.0.2",
  "_from": "tinkerforge@"
}